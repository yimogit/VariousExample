<log4net>
  <root>
    <!-- 记录哪个级别以上的日志:  OFF->FATAL->ERROR->WARN->INFO->DEBUG/ALL  DEBUG↑-->
    <level value="DEBUG" />
    <!--文件形式记录日志-->
    <appender-ref ref="RollingLogFileAppender" />
    <!--错误日志保存到Error文件夹 使用filter保存Error级别↑的日志-->
    <appender-ref ref="RollingLogFileError"/>
    <!--输出控制台-->
    <appender-ref ref="ConsoleAppender" />
    <!--保存到数据库 若启用则需要创建SQLServer数据表-->
    <!--<appender-ref ref="AdoNetAppender_SqlServer" />-->
    <!--发送邮件 若启用则需要配置邮箱信息-->
    <!--<appender-ref ref="SmtpAppender" />-->
  </root>
  <!--所有日志配置-->
  <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
    <!--1. 文件路径，如果RollingStyle为Composite或Date，则这里设置为目录，文件名在DatePattern里设置，其他则这里要有文件名。已经扩展支持虚拟目录-->
    <file value="Logs\Log4net\ALL\" />
    <!--2. 创建新文件的方式，可选为Size（按文件大小），Date（按日期），Once（每启动一次创建一个文件），Composite（按日期及文件大小），默认为Composite-->
    <rollingStyle value="Composite" />
    <!--3. 当RollingStyle为Composite或Date，这里设置文件名格式-->
    <datePattern value='yyyy-MM-dd".txt"' />
    <!--4. true/false，默认为true。为true时，RollingStyle的date值将无效。且为true时，需要在file里指定文件名，所有日志都会记录在这个文件里。-->
    <staticLogFileName value="false" />
    <!--5. 当rollingStyle为Composite或Size，这里设置最大文件大小（可以KB，MB，GB为单位，默认为字节）-->
    <maximumFileSize value="30MB" />
    <!--6. 默认值为-1。当文件超过MaximumFileSize的大小时，如果要创建新的文件来存储日志，会根据CountDirection的值来重命名文件。  
             大于-1的值时，file里指定的文件名会依次加上.0,.1,.2递增。  
             当等于或小于-1时，创建依赖于MaxSizeRollBackups参数值，创建备份日志数。-->
    <countDirection value="-1" />
    <!--7. 备份日志数目，默认为0。在CountDirection为负数时有效。-->
    <maxSizeRollBackups value="-1" />
    <!--8. true/false，默认为true。当文件存在时，是否在原文件上追加内容。-->
    <appendToFile value="true" />
    <layout type="log4net.Layout.PatternLayout">
      <!-- 日志起始输出 换行使用：&#13;&#10;-->
      <header value="" />
      <!-- 日志结束输出 -->
      <footer value="" />
      <conversionPattern value="================记录时间：%date 线程ID:[%thread] 日志级别：%-5level ================%newline%message%newline%newline" />
    </layout>
  </appender>
  <!--错误日志配置-->
  <appender name="RollingLogFileError" type="log4net.Appender.RollingFileAppender">
    <file value="Logs\Log4net\Error\" />
    <rollingStyle value="Composite" />
    <datePattern value='yyyy-MM-dd".txt"' />
    <staticLogFileName value="false" />
    <maximumFileSize value="30MB" />
    <countDirection value="-1" />
    <maxSizeRollBackups value="-1" />
    <appendToFile value="true" />
    <layout type="log4net.Layout.PatternLayout">
      <header value="" />
      <footer value="" />
      <conversionPattern value="================记录时间：%date 线程ID:[%thread] 日志级别：%-5level ================%newline%message" />
    </layout>
    <filter type="log4net.Filter.LevelRangeFilter">
      <levelMin value="ERROR" />
      <levelMax value="FATAL" />
    </filter>
  </appender>
  <!--输出控制台配置-->
  <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="================记录时间：%date 线程ID:[%thread] 日志级别：%-5level ================%newline%message%newline" />
    </layout>
  </appender>
  <!--保存到数据库配置-->
  <appender name="AdoNetAppender_SqlServer" type="log4net.Appender.ADONetAppender">
    <!--需要在数据库创建日志表，并配置正确的连接字符串
    SQL语句：
    CREATE TABLE [dbo].[MyLog_Log4net](
      [nId] [bigint] IDENTITY(1,1) NOT NULL,   
      [dtDate] [datetime] NOT NULL,   
      [sThread] [varchar](100) NOT NULL,   
      [sLevel] [varchar](200) NOT NULL,   
      [sLogger] [varchar](500) NOT NULL,   
      [sMessage] [varchar](3000) NOT NULL,   
      [sException] [varchar](4000) NULL)
     GO
    -->
    <bufferSize value="1" />
    <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
    <connectionString value="SERVER=127.0.0.1;DATABASE=testdb;UID=sa;PWD=123456;Connect Timeout=15;" />
    <commandText value="INSERT INTO MyLog_Log4net ([dtDate],[sThread],[sLevel],[sLogger],[sMessage],[sException]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
    <parameter>
      <parameterName value="@log_date" />
      <dbType value="DateTime" />
      <layout type="log4net.Layout.RawTimeStampLayout" />
    </parameter>
    <parameter>
      <parameterName value="@thread" />
      <dbType value="String" />
      <size value="100" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%t" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@log_level" />
      <dbType value="String" />
      <size value="200" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%p" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@logger" />
      <dbType value="String" />
      <size value="500" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%logger" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@message" />
      <dbType value="String" />
      <size value="3000" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%m" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@exception" />
      <dbType value="String" />
      <size value="4000" />
      <layout type="log4net.Layout.ExceptionLayout" />
    </parameter>
  </appender>
  <!--发送邮箱配置-->
  <appender name="SmtpAppender" type="log4net.Appender.SmtpAppender">
    <!--设置发送电子邮件-->
    <authentication value="Basic" />
    <to value="接收人@qq.com" />
    <from value="发送人@163.com" />
    <username value="发送人用户名" />
    <password value="发送人密码" />
    <subject value="【程序异常日志记录邮件发送】" />
    <smtpHost value="smtp.163.com" />
    <bufferSize value="512" />
    <lossy value="true" />
    <evaluator type="log4net.Core.LevelEvaluator">
      <threshold value="ERROR"/>
    </evaluator>
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="================记录时间：%date 线程ID:[%thread] 日志级别：%-5level ================%newline%message" />
    </layout>
    <!--只有ERROR，FATAL级别的错误才会发送Email-->
    <filter type="log4net.Filter.LevelRangeFilter">
      <levelMin value="ERROR" />
      <levelMax value="FATAL" />
    </filter>
  </appender>
</log4net>